include(ExternalProject)

# Builds external third party projects.
# The parent script needs to define the "GLOBAL_OUTPUT_PATH" variable,
# which will be used as output directory for all *.lib, *.dll, *.a, *.so, *.pdb files.

# Download and install RapidJSON
ExternalProject_Add(
        RapidJSON

        GIT_REPOSITORY "https://github.com/Tencent/rapidjson.git"
        GIT_TAG "master"
        SOURCE_DIR "${CMAKE_SOURCE_DIR}/3rdparty/rapidjson"

        UPDATE_COMMAND ""
        PATCH_COMMAND ""
        BUILD_COMMAND ""

        INSTALL_COMMAND   ""
        TEST_COMMAND ""

        GIT_SUBMODULES	""
)


set(RapidJSON_INCLUDE_DIRS "${CMAKE_SOURCE_DIR}/3rdparty/rapidjson/include")
include_directories(${RapidJSON_INCLUDE_DIRS})




ExternalProject_Add(
        OSRM

        GIT_REPOSITORY "https://github.com/Project-OSRM/osrm-backend.git"

        UPDATE_COMMAND ""
        PATCH_COMMAND ""

        SOURCE_DIR "${CMAKE_SOURCE_DIR}/3rdparty/osrm"
        CMAKE_ARGS -DBUILD_AS_SUBPROJECT=ON -DCMAKE_INSTALL_PREFIX=${GLOBAL_OUTPUT_PATH}/osrm -DBoost_USE_STATIC_LIBS=ON -DBoost_USE_STATIC_RUNTIME=ON

        INSTALL_DIR ${GLOBAL_OUTPUT_PATH}/osrm

        TEST_COMMAND ""
)

ExternalProject_Add_Step(
  OSRM CopyToBin
  COMMAND ${CMAKE_COMMAND} -E copy_directory ${GLOBAL_OUTPUT_PATH}/osrm/bin ${GLOBAL_OUTPUT_PATH}
  COMMAND ${CMAKE_COMMAND} -E copy_directory ${GLOBAL_OUTPUT_PATH}/osrm/lib ${GLOBAL_OUTPUT_PATH}
  DEPENDEES install
)

set(OSRM_INCLUDE_DIRS "${CMAKE_SOURCE_DIR}/3rdparty/osrm/include"
                      "${CMAKE_SOURCE_DIR}/3rdparty/osrm/third_party/sol2/"
                      "${CMAKE_SOURCE_DIR}/3rdparty/osrm/third_party/variant/include")
set(OSRM_LIBRARIES "${CMAKE_SHARED_LIBRARY_PREFIX}osrm${CMAKE_SHARED_LIBRARY_SUFFIX}")
include_directories(${OSRM_INCLUDE_DIRS})

###############################################################################
# HumbleLogging
###############################################################################

# ExternalProject_Add(
#   HumbleLogging

#   GIT_REPOSITORY "https://github.com/mfreiholz/humble-logging-library.git"
#   GIT_TAG "master"
  
#   UPDATE_COMMAND ""
#   PATCH_COMMAND ""
  
#   SOURCE_DIR "${CMAKE_SOURCE_DIR}/3rdparty/humblelogging"
#   CMAKE_ARGS -DBuildShared=ON -DBuildExamples=OFF -DCMAKE_INSTALL_PREFIX=${GLOBAL_OUTPUT_PATH}/osrm
  
#   TEST_COMMAND ""
# )

# ExternalProject_Add_Step(
#   HumbleLogging CopyToBin
#   COMMAND ${CMAKE_COMMAND} -E copy_directory ${GLOBAL_OUTPUT_PATH}/humblelogging/bin ${GLOBAL_OUTPUT_PATH}
#   COMMAND ${CMAKE_COMMAND} -E copy_directory ${GLOBAL_OUTPUT_PATH}/humblelogging/lib ${GLOBAL_OUTPUT_PATH}
#   DEPENDEES install
# )

# set(HumbleLogging_INCLUDE_DIRS "${CMAKE_SOURCE_DIR}/3rdparty/humblelogging/include")
# set(HumbleLogging_LIBRARIES "${CMAKE_SHARED_LIBRARY_PREFIX}humblelogging${CMAKE_SHARED_LIBRARY_SUFFIX}")
# include_directories(${HumbleLogging_INCLUDE_DIRS})

###############################################################################
# Google Prototype Buffers (protobuf)
# VS2008 Issue: Doesn't support OutDir/OutputPath
###############################################################################

#if(WIN32)
#
#  ExternalProject_Add(
#    protobuf
#
#    URL https://protobuf.googlecode.com/files/protobuf-2.5.0.tar.gz
#    
#    UPDATE_COMMAND ""
#    PATCH_COMMAND ""
#    
#    SOURCE_DIR "${CMAKE_SOURCE_DIR}/3rdparty/protobuf"
#    CONFIGURE_COMMAND ""
#
#    BUILD_COMMAND devenv /upgrade ${CMAKE_SOURCE_DIR}/3rdparty/protobuf/vsprojects/protobuf.sln
#      COMMAND msbuild /p:OutputPath=${GLOBAL_OUTPUT_PATH}/protobuf/ /p:OutDir=${GLOBAL_OUTPUT_PATH}/protobuf/ ${CMAKE_SOURCE_DIR}/3rdparty/protobuf/vsprojects/protobuf.sln
#
#    INSTALL_COMMAND ""
#    
#    TEST_COMMAND ""
#  )
#  
#  ExternalProject_Add_Step(
#    protobuf CopyToBin
#    COMMAND ${CMAKE_COMMAND} -E copy_directory ${GLOBAL_OUTPUT_PATH}/protobuf ${GLOBAL_OUTPUT_PATH}
#    DEPENDEES install
#  )
#
#  set(protobuf_INCLUDE_DIRS ${CMAKE_SOURCE_DIR}/3rdparty/protobuf/src/google/protobuf)
#  set(protobuf_LIBRARIES ${CMAKE_SHARED_LIBRARY_PREFIX}protobuf${CMAKE_SHARED_LIBRARY_SUFFIX})
#  include_directories(${protobuf_INCLUDE_DIRS})
#  
#else(WIN32)
#
#  ExternalProject_Add(
#    protobuf
#
#    URL https://protobuf.googlecode.com/files/protobuf-2.5.0.tar.gz
#    
#    UPDATE_COMMAND ""
#    PATCH_COMMAND ""
#    
#    SOURCE_DIR "${CMAKE_SOURCE_DIR}/3rdparty/protobuf"
#    CONFIGURE_COMMAND "${CMAKE_SOURCE_DIR}/3rdparty/protobuf/configure" --prefix=${GLOBAL_OUTPUT_PATH}/protobuf
#
#    BUILD_COMMAND make
#    
#    INSTALL_COMMAND make install
#    
#    TEST_COMMAND ""
#  )
#  
#  ExternalProject_Add_Step(
#    protobuf CopyToBin
#    COMMAND ${CMAKE_COMMAND} -E copy_directory ${GLOBAL_OUTPUT_PATH}/protobuf ${GLOBAL_OUTPUT_PATH}
#    DEPENDEES install
#  )
#
#  set(protobuf_INCLUDE_DIRS ${GLOBAL_OUTPUT_PATH}/protobuf/include)
#  set(protobuf_LIBRARIES ${GLOBAL_OUTPUT_PATH}/protobuff/lib/)
#  include_directories(${protobuf_INCLUDE_DIRS})
#
#endif(WIN32)
